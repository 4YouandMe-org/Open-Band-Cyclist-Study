//
//  ByteMathUtilsTests.swift
//  OpenBandCyclistValidationTests
//
//  Copyright Â© 2020 4YouandMe. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// 1.  Redistributions of source code must retain the above copyright notice, this
// list of conditions and the following disclaimer.
//
// 2.  Redistributions in binary form must reproduce the above copyright notice,
// this list of conditions and the following disclaimer in the documentation and/or
// other materials provided with the distribution.
//
// 3.  Neither the name of the copyright holder(s) nor the names of any contributors
// may be used to endorse or promote products derived from this software without
// specific prior written permission. No license is granted to the trademarks of
// the copyright holders even if such marks are included in this software.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

import XCTest
@testable import OpenBandCyclistValidation

struct ByteMathAccelTest {
    var b0: UInt8
    var b1: UInt8
    var x: Float
    var b2: UInt8
    var b3: UInt8
    var y: Float
    var b4: UInt8
    var b5: UInt8
    var z: Float
    
    public init(_ b0: UInt8, _ b1: UInt8, _ x: Double,
                _ b2: UInt8, _ b3: UInt8, _ y: Double,
                _ b4: UInt8, _ b5: UInt8, _ z: Double) {
        self.b0 = b0
        self.b1 = b1
        self.x = Float(x)
        self.b2 = b2
        self.b3 = b3
        self.y = Float(y)
        self.b4 = b4
        self.b5 = b5
        self.z = Float(z)
    }
}

struct ByteMathTimestampTest {
    var b0: UInt8
    var b1: UInt8
    var b2: UInt8
    var b3: UInt8
    var t: UInt32
    
    public init(_ b0: UInt8, _ b1: UInt8, _ b2: UInt8, _ b3: UInt8, _ t: UInt32) {
        self.b0 = b0
        self.b1 = b1
        self.b2 = b2
        self.b3 = b3
        self.t = t
    }
}

class ByteMathUtilsTests: XCTestCase {
    
    // These tests were generated by the following code run on the Arduino firmware
    
    
    let accelTests = [
        ByteMathAccelTest(1, 183, -0.214355468750, 254, 116, 0.193359375000, 7, 217, -0.980957031250),
        ByteMathAccelTest(1, 103, -0.175292968750, 254, 177, 0.163574218750, 8, 83, -1.040527343750),
        ByteMathAccelTest(1, 170, -0.208007812500, 255, 117, 0.067871093750, 7, 239, -0.991699218750),
        ByteMathAccelTest(1, 228, -0.236328125000, 255, 147, 0.053222656250, 7, 141, -0.943847656250),
        ByteMathAccelTest(2, 19, -0.259277343750, 0, 95, -0.046386718750, 7, 109, -0.928222656250),
        ByteMathAccelTest(5, 44, -0.646484375000, 255, 106, 0.073242187500, 4, 238, -0.616210937500),
        ByteMathAccelTest(5, 237, -0.740722656250, 255, 72, 0.089843750000, 1, 122, -0.184570312500),
        ByteMathAccelTest(7, 80, -0.914062500000, 1, 83, -0.165527343750, 1, 102, -0.174804687500),
        ByteMathAccelTest(7, 196, -0.970703125000, 0, 249, -0.121582031250, 254, 167, 0.168457031250),
        ByteMathAccelTest(7, 208, -0.976562500000, 1, 48, -0.148437500000, 254, 219, 0.143066406250),
        ByteMathAccelTest(7, 217, -0.980957031250, 1, 96, -0.171875000000, 254, 218, 0.143554687500),
        ByteMathAccelTest(7, 233, -0.988769531250, 1, 69, -0.158691406250, 254, 230, 0.137695312500),
        ByteMathAccelTest(7, 87, -0.917480468750, 255, 115, 0.068847656250, 254, 200, 0.152343750000),
        ByteMathAccelTest(0, 71, -0.034667968750, 1, 62, -0.155273437500, 9, 69, -1.158691406250),
        ByteMathAccelTest(0, 114, -0.055664062500, 255, 227, 0.014160156250, 8, 201, -1.098144531250),
        ByteMathAccelTest(1, 226, -0.235351562500, 250, 124, 0.689453125000, 7, 89, -0.918457031250),
        ByteMathAccelTest(2, 225, -0.359863281250, 252, 186, 0.409179687500, 7, 3, -0.876464843750),
        ByteMathAccelTest(1, 225, -0.234863281250, 248, 166, 0.918945312500, 1, 60, -0.154296875000),
        ByteMathAccelTest(1, 145, -0.195800781250, 248, 158, 0.922851562500, 254, 182, 0.161132812500),
        ByteMathAccelTest(1, 174, -0.209960937500, 248, 90, 0.956054687500, 254, 213, 0.145996093750),
        ByteMathAccelTest(2, 13, -0.256347656250, 248, 149, 0.927246093750, 254, 226, 0.139648437500),
        ByteMathAccelTest(1, 128, -0.187500000000, 248, 33, 0.983886718750, 254, 226, 0.139648437500),
        ByteMathAccelTest(1, 120, -0.183593750000, 248, 104, 0.949218750000, 254, 198, 0.153320312500),
        ByteMathAccelTest(1, 114, -0.180664062500, 248, 148, 0.927734375000, 253, 236, 0.259765625000),
        ByteMathAccelTest(1, 121, -0.184082031250, 248, 115, 0.943847656250, 254, 82, 0.209960937500),
        ByteMathAccelTest(1, 98, -0.172851562500, 248, 179, 0.912597656250, 253, 202, 0.276367187500),
        ByteMathAccelTest(1, 98, -0.172851562500, 248, 154, 0.924804687500, 253, 78, 0.336914062500),
        ByteMathAccelTest(1, 79, -0.163574218750, 248, 178, 0.913085937500, 253, 124, 0.314453125000),
        ByteMathAccelTest(1, 115, -0.181152343750, 247, 219, 1.018066406250, 253, 229, 0.263183593750),
        ByteMathAccelTest(3, 123, -0.435058593750, 247, 135, 1.059082031250, 0, 246, -0.120117187500),
        ByteMathAccelTest(1, 35, -0.142089843750, 251, 132, 0.560546875000, 0, 111, -0.054199218750),
        ByteMathAccelTest(3, 6, -0.377929687500, 247, 203, 1.025878906250, 6, 108, -0.802734375000),
        ByteMathAccelTest(2, 200, -0.347656250000, 251, 135, 0.559082031250, 8, 217, -1.105957031250),
        ByteMathAccelTest(0, 179, -0.087402343750, 0, 152, -0.074218750000, 1, 10, -0.129882812500),
        ByteMathAccelTest(255, 109, 0.071777343750, 1, 51, -0.149902343750, 0, 170, -0.083007812500),
        ByteMathAccelTest(255, 202, 0.026367187500, 255, 180, 0.037109375000, 252, 58, 0.471679687500),
        ByteMathAccelTest(255, 107, 0.072753906250, 254, 115, 0.193847656250, 251, 243, 0.506347656250),
        ByteMathAccelTest(0, 113, -0.055175781250, 0, 38, -0.018554687500, 253, 21, 0.364746093750),
        ByteMathAccelTest(255, 247, 0.004394531250, 253, 215, 0.270019531250, 250, 158, 0.672851562500),
        ByteMathAccelTest(0, 8, -0.003906250000, 5, 222, -0.733398437500, 1, 195, -0.220214843750),
        ByteMathAccelTest(10, 60, -1.279296875000, 24, 42, -3.020507812500, 254, 147, 0.178222656250),
        ByteMathAccelTest(255, 109, 0.071777343750, 254, 215, 0.145019531250, 254, 48, 0.226562500000),
        ByteMathAccelTest(255, 33, 0.108886718750, 252, 129, 0.437011718750, 255, 133, 0.060058593750),
        ByteMathAccelTest(4, 223, -0.608886718750, 12, 108, -1.552734375000, 251, 65, 0.593261718750),
        ByteMathAccelTest(254, 15, 0.242675781250, 250, 5, 0.747558593750, 254, 152, 0.175781250000),
        ByteMathAccelTest(5, 93, -0.670410156250, 1, 49, -0.148925781250, 244, 94, 1.454101562500),
        ByteMathAccelTest(4, 203, -0.599121093750, 2, 158, -0.327148437500, 253, 253, 0.251464843750),
        ByteMathAccelTest(246, 160, 1.171875000000, 2, 132, -0.314453125000, 250, 171, 0.666503906250),
        ByteMathAccelTest(12, 42, -1.520507812500, 255, 107, 0.072753906250, 249, 149, 0.802246093750),
        ByteMathAccelTest(253, 55, 0.348144531250, 5, 130, -0.688476562500, 253, 150, 0.301757812500),
        ByteMathAccelTest(250, 111, 0.695800781250, 5, 15, -0.632324218750, 254, 181, 0.161621093750),
        ByteMathAccelTest(238, 131, 2.186035156250, 8, 246, -1.120117187500, 254, 31, 0.234863281250),
        ByteMathAccelTest(252, 102, 0.450195312500, 1, 222, -0.233398437500, 249, 211, 0.771972656250),
        ByteMathAccelTest(17, 126, -2.186523437500, 248, 220, 0.892578125000, 235, 2, 2.624023437500),
        ByteMathAccelTest(230, 191, 3.156738281250, 21, 219, -2.731933593750, 17, 22, -2.135742187500),
        ByteMathAccelTest(24, 185, -3.090332031250, 238, 186, 2.159179687500, 226, 249, 3.628417968750),
        ByteMathAccelTest(2, 10, -0.254882812500, 1, 140, -0.193359375000, 247, 164, 1.044921875000),
        ByteMathAccelTest(30, 60, -3.779296875000, 0, 48, -0.023437500000, 12, 252, -1.623046875000),
        ByteMathAccelTest(21, 170, -2.708007812500, 8, 198, -1.096679687500, 17, 24, -2.136718750000),
        ByteMathAccelTest(244, 95, 1.453613281250, 253, 209, 0.272949218750, 235, 156, 2.548828125000),
        ByteMathAccelTest(247, 92, 1.080078125000, 250, 110, 0.696289062500, 233, 115, 2.818847656250),
        ByteMathAccelTest(1, 2, -0.125976562500, 2, 252, -0.373046875000, 253, 235, 0.260253906250),
        ByteMathAccelTest(246, 29, 1.235839843750, 13, 115, -1.681152343750, 245, 25, 1.362792968750),
        ByteMathAccelTest(235, 210, 2.522460937500, 19, 100, -2.423828125000, 241, 237, 1.759277343750),
        ByteMathAccelTest(255, 97, 0.077636718750, 4, 33, -0.516113281250, 252, 99, 0.451660156250),
        ByteMathAccelTest(10, 78, -1.288085937500, 1, 44, -0.146484375000, 254, 21, 0.239746093750),
        ByteMathAccelTest(10, 170, -1.333007812500, 0, 61, -0.029785156250, 240, 116, 1.943359375000),
        ByteMathAccelTest(5, 73, -0.660644531250, 13, 89, -1.668457031250, 6, 226, -0.860351562500),
        ByteMathAccelTest(5, 30, -0.639648437500, 13, 202, -1.723632812500, 11, 54, -1.401367187500),
        ByteMathAccelTest(39, 236, -4.990234375000, 0, 174, -0.084960937500, 44, 186, -5.590820312500),
        ByteMathAccelTest(238, 225, 2.140136718750, 11, 168, -1.457031250000, 250, 123, 0.689941406250),
        ByteMathAccelTest(249, 125, 0.813964843750, 15, 5, -1.877441406250, 5, 146, -0.696289062500),
        ByteMathAccelTest(254, 39, 0.230957031250, 254, 182, 0.161132812500, 7, 16, -0.882812500000),
        ByteMathAccelTest(253, 101, 0.325683593750, 0, 2, -0.000976562500, 7, 161, -0.953613281250),
        ByteMathAccelTest(253, 4, 0.373046875000, 0, 26, -0.012695312500, 7, 132, -0.939453125000),
        ByteMathAccelTest(253, 95, 0.328613281250, 0, 9, -0.004394531250, 7, 166, -0.956054687500),
        ByteMathAccelTest(253, 64, 0.343750000000, 0, 3, -0.001464843750, 7, 196, -0.970703125000),
        ByteMathAccelTest(253, 76, 0.337890625000, 0, 9, -0.004394531250, 7, 159, -0.952636718750),
        ByteMathAccelTest(253, 72, 0.339843750000, 0, 16, -0.007812500000, 7, 175, -0.960449218750),
        ByteMathAccelTest(253, 71, 0.340332031250, 0, 16, -0.007812500000, 7, 186, -0.965820312500)
    ]
    
    let timestampTests = [
        ByteMathTimestampTest(0, 0, 0, 0, 0),
        ByteMathTimestampTest(0, 0, 4, 59, 1083),
        ByteMathTimestampTest(0, 0, 6, 75, 1611),
        ByteMathTimestampTest(0, 0, 6, 113, 1649),
        ByteMathTimestampTest(0, 0, 255, 197, 65477),
        ByteMathTimestampTest(0, 1, 0, 141, 65677),
        ByteMathTimestampTest(0, 2, 255, 128, 196480),
        ByteMathTimestampTest(12, 239, 191, 152, 217038744),
        ByteMathTimestampTest(32, 2, 212, 33, 537056289),
        ByteMathTimestampTest(47, 251, 198, 113, 805029489),
        ByteMathTimestampTest(67, 88, 142, 9, 1129877001),
        ByteMathTimestampTest(77, 232, 192, 141, 1307099277),
        ByteMathTimestampTest(121, 61, 217, 186, 2034096570),
        ByteMathTimestampTest(140, 227, 143, 84, 2363723604),
        ByteMathTimestampTest(167, 7, 62, 49, 2802269745),
        ByteMathTimestampTest(185, 0, 174, 82, 3103829586),
        ByteMathTimestampTest(199, 254, 126, 48, 3355344432),
        ByteMathTimestampTest(216, 116, 179, 155, 3631526811),
        ByteMathTimestampTest(236, 110, 44, 96, 3966643296),
        ByteMathTimestampTest(247, 205, 66, 88, 4157424216),
        ByteMathTimestampTest(255, 225, 175, 179, 4292980659),
        ByteMathTimestampTest(0, 2, 86, 61, 153149)
    ]

    override func setUp() {
        // Put setup code here. This method is called before the invocation of each test method in the class.
    }

    override func tearDown() {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
    }

    func testToOpenBandTimestamp() {
        for test in self.timestampTests {
            let timestamp = ByteMathUtils.toOpenBandTimestamp(byte0: test.b0, byte1: test.b1, byte2: test.b2, byte3: test.b3)
            XCTAssertEqual(timestamp, test.t)
        }
    }
    
    func testPerformanceToOpenBandTimestamp() {
        // This is an example of a performance test case.
        let test = self.timestampTests[0]
        self.measure {
            let _ = ByteMathUtils.toOpenBandTimestamp(byte0: test.b0, byte1: test.b1, byte2: test.b2, byte3: test.b3)
        }
    }
    
    func testToOpenBandAccelFloat() {
        for test in self.accelTests {
            let x = ByteMathUtils.toOpenBandAccelFloat(byte0: test.b0, byte1: test.b1)
            XCTAssertEqual(x, test.x)
            let y = ByteMathUtils.toOpenBandAccelFloat(byte0: test.b2, byte1: test.b3)
            XCTAssertEqual(y, test.y)
            let z = ByteMathUtils.toOpenBandAccelFloat(byte0: test.b4, byte1: test.b5)
            XCTAssertEqual(z, test.z)
        }
    }

    func testPerformanceToOpenBandAccelFloat() {
        let test = self.accelTests[0]
        self.measure {
            let _ = ByteMathUtils.toOpenBandAccelFloat(byte0: test.b0, byte1: test.b1)
        }
    }
}
